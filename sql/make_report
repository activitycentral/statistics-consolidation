#!/usr/bin/env  python

# Copyright (C) 2012, Gustavo Duarte
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
from sugar_stats_consolidation.db import *
import sys
import logging


parser = argparse.ArgumentParser()
parser.add_argument('--query',required=True)
parser.add_argument('--start_date',required=True)
parser.add_argument('--end_date',required=True)
parser.add_argument('--db_name',required=True)
parser.add_argument('--db_user',required=True)
parser.add_argument('--db_pass',required=True)
parser.add_argument('--activity',required=False)
parser.add_argument('--school',required=False)
parser.add_argument('--log_level',required=False)

args = parser.parse_args()

"""
_LOG_FORMAT='[%(asctime)s]-%(levelname)s-\'%(name)s\': %(message)s'
"""
_LOG_FORMAT='%(message)s'

if args.log_level == 'debug':
	log_level = logging.DEBUG
else:
	log_level = logging.INFO


log = logging.getLogger(__name__)
log.setLevel(log_level)
ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter(_LOG_FORMAT))
log.addHandler(ch)

logging.getLogger('sugar_stats_consolidation.db').addHandler(ch)
logging.getLogger('sugar_stats_consolidation.db').setLevel(log_level)
logging.getLogger('sugar_stats_consolidation.rrd_files').addHandler(ch)
logging.getLogger('sugar_stats_consolidation.rrd_files').setLevel(log_level)

def activity_most_used(re, start, end, school=None):
	activity = re.rep_get_most_activity_used(start, end, school)
	log.info("**************************************************************************************************************")
	log.info("                                     Most Activity used                                                       ")
	log.info('NAME:     %s', activity[0])
	log.info('SCHOOL:   %s', school)
	log.info('INTERVAL: %s-> %s', start, end)
	log.info('TIME:     %.2f hrs / %.2f mins / %.2f secs', (activity[1]/60/60), (activity[1]/60), activity[1])
	log.info("***************************************************************************************************************")

def frequency_usage(re, start, end, school=None):
	fres = re.rep_frequency_usage(start, end, school);
	

	ts_end   = long (datetime.strptime(end, "%Y-%m-%d").strftime("%s"))
	ts_start = long (datetime.strptime(start, "%Y-%m-%d").strftime("%s"))
	

	f_x_day = (fres / ((ts_end - ts_start)/(60*60*24)))/60
	f_total = (fres / 60)
	log.info("**************************************************************************************************************")
	log.info("                                     Fequency Usage                                                           ")
	log.info('SCHOOL:   %s', school)
	log.info('INTERVAL: %s-> %s', start, end)
	log.info('PER DAY:  %.2f min / day', (f_x_day))
	log.info('TOTAL:    %.2f min', (f_total))
	log.info("**************************************************************************************************************")

def activity_time (re, start, end, activity, school=None):
	time = re.rep_activity_time (start, end, activity, school);
	

	ts_end   = long (datetime.strptime(end, "%Y-%m-%d").strftime("%s"))
	ts_start = long (datetime.strptime(start, "%Y-%m-%d").strftime("%s"))

	log.info("**************************************************************************************************************")
	log.info("                                     Activity Time                                                            ")  
	log.info('NAME:     %s', activity)
	log.info('SCHOOL:   %s', school)
	log.info('INTERVAL: %s-> %s', start, end)
	log.info('UPTIME:   %s secs', time[0])
	log.info('FOCUS     %s secs', time[1])
	log.info("**************************************************************************************************************")



def main():
	re = DB_Stats (args.db_name, args.db_user, args.db_pass)
	re.connect()
	
	if args.query == 'activity_time':
		activity_time(re, args.start_date, args.end_date, args.activity, args.school)
	elif args.query == 'activity_most_used':
		activity_most_used(re, args.start_date, args.end_date, args.school);
	elif args.query == 'frequency_usage':
		frequency_usage(re, args.start_date, args.end_date, args.school)
	elif args.query == 'all':
		activity_most_used(re, args.start_date, args.end_date,args.school);
		frequency_usage(re, args.start_date, args.end_date, args.school)
		activity_time(re, args.start_date, args.end_date, args.activity, args.school)
	else:
		log.error("Query option unkwon: %s", args.query)
		
	re.close()

if __name__ == '__main__':
    main()
